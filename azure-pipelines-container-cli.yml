trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  resourceGroupName: 'DevSchool'
  containerName: 'acrclideployment'
  acrName: 'acrclideployment'
  imageName: 'webapp'
  imageTag: '$(Build.BuildId)'
  dockerfilePath: '$(Build.SourcesDirectory)/app/Dockerfile'
  dockerRegistryServiceConnection: '809cf38a-bceb-4122-b3f8-71f4a0dbace6'
  cpuCores: '1'
  memoryGB: '1'
  azureSubscription: 'DevSchoolING (5334c216-94db-441b-b614-2e0c708e2b87)'
  keyVaultName: 'keyVaultDevSchool'
  vmImageName: 'ubuntu-latest'

stages:
- stage: Prepare
  jobs:
  - job: check_connection
    steps:
    - script: |
        #!/bin/bash

        if ping -q -c 1 -W 1 google.com >/dev/null; then
          echo "Connection available."
        else
          echo "Connection not available."
          exit 1
        fi
      displayName: "Check connection"
- stage: Build
  displayName: Build and push stage
  dependsOn: Prepare
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageName)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(acrName)
        tags: |
          $(imageTag)

- stage: Deploy
  displayName: Deploy
  dependsOn: Build
  jobs:
  - job: Deploy
    displayName: Deploy a container
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: '$(azureSubscription)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          acrPassword=$(az keyvault secret show --name acr-password --vault-name $(keyVaultName) --query value -o tsv)
          acrNameSecret=$(az keyvault secret show --name acrName --vault-name $(keyVaultName) --query value -o tsv)
          az container create --resource-group $(resourceGroupName) --name $(containerName) --image $(acrName).azurecr.io/$(imageName):$(imageTag) --cpu $(cpuCores) --memory $(memoryGB) --registry-login-server $(acrName).azurecr.io --registry-username $acrNameSecret --registry-password $acrPassword --ip-address public --ports 5000
- stage: Test
  displayName: 'Test API with curl'
  dependsOn: Deploy
  jobs:
  - job: test
    displayName: 'Test API'
    steps:
    - script: |
        curl http://20.160.242.151:5000/check_api
      displayName: 'Send API test request'
    - script: |
        if [ "$?" -eq 0 ]
        then
          echo "API test succeeded"
          exit 0
        else
          echo "API test failed"
          exit 1
        fi
      displayName: 'Check API test response'